// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CampaignBidLog extends ethereum.Event {
  get params(): CampaignBidLog__Params {
    return new CampaignBidLog__Params(this);
  }
}

export class CampaignBidLog__Params {
  _event: CampaignBidLog;

  constructor(event: CampaignBidLog) {
    this._event = event;
  }

  get campaignID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get addr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CampaignLog extends ethereum.Event {
  get params(): CampaignLog__Params {
    return new CampaignLog__Params(this);
  }
}

export class CampaignLog__Params {
  _event: CampaignLog;

  constructor(event: CampaignLog) {
    this._event = event;
  }

  get campaignID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get goal(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CrowdFunding__campaignsArrayResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getNumFunders(): BigInt {
    return this.value1;
  }

  getFundingGoal(): BigInt {
    return this.value2;
  }

  getTotalAmount(): BigInt {
    return this.value3;
  }
}

export class CrowdFunding__fundersArrayResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAddr(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class CrowdFunding extends ethereum.SmartContract {
  static bind(address: Address): CrowdFunding {
    return new CrowdFunding("CrowdFunding", address);
  }

  newCampaign(receiver: Address, goal: BigInt): BigInt {
    let result = super.call(
      "newCampaign",
      "newCampaign(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(goal)
      ]
    );

    return result[0].toBigInt();
  }

  try_newCampaign(
    receiver: Address,
    goal: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "newCampaign",
      "newCampaign(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(goal)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(campaignID: BigInt): boolean {
    let result = super.call("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(campaignID)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(campaignID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(campaignID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  campaignsArray(param0: BigInt): CrowdFunding__campaignsArrayResult {
    let result = super.call(
      "campaignsArray",
      "campaignsArray(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CrowdFunding__campaignsArrayResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_campaignsArray(
    param0: BigInt
  ): ethereum.CallResult<CrowdFunding__campaignsArrayResult> {
    let result = super.tryCall(
      "campaignsArray",
      "campaignsArray(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrowdFunding__campaignsArrayResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  fundersArray(param0: BigInt): CrowdFunding__fundersArrayResult {
    let result = super.call(
      "fundersArray",
      "fundersArray(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CrowdFunding__fundersArrayResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_fundersArray(
    param0: BigInt
  ): ethereum.CallResult<CrowdFunding__fundersArrayResult> {
    let result = super.tryCall(
      "fundersArray",
      "fundersArray(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CrowdFunding__fundersArrayResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getReceiver(campaignID: BigInt): Address {
    let result = super.call("getReceiver", "getReceiver(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(campaignID)
    ]);

    return result[0].toAddress();
  }

  try_getReceiver(campaignID: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReceiver",
      "getReceiver(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(campaignID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isParticipate(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "isParticipate",
      "isParticipate(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_isParticipate(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isParticipate",
      "isParticipate(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  numCampagins(): BigInt {
    let result = super.call("numCampagins", "numCampagins():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numCampagins(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numCampagins", "numCampagins():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get campaignID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class NewCampaignCall extends ethereum.Call {
  get inputs(): NewCampaignCall__Inputs {
    return new NewCampaignCall__Inputs(this);
  }

  get outputs(): NewCampaignCall__Outputs {
    return new NewCampaignCall__Outputs(this);
  }
}

export class NewCampaignCall__Inputs {
  _call: NewCampaignCall;

  constructor(call: NewCampaignCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get goal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class NewCampaignCall__Outputs {
  _call: NewCampaignCall;

  constructor(call: NewCampaignCall) {
    this._call = call;
  }

  get campaignID(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get campaignID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get reached(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
